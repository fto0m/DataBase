package application;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.*;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.*;
import javafx.stage.Modality;
import javafx.stage.Stage;

public class PublisherManagementApp extends Application {

	private ObservableList<Publisher> publishers;
	private TableView<Publisher> table;

	@Override
	public void start(Stage primaryStage) {
		primaryStage.setTitle("Publishers Management - Yes Baby");

		// Initialize data
		publishers = FXCollections.observableArrayList(DBConnect.getAllPublishers());

		// Create the main layout
		VBox mainLayout = createMainLayout(primaryStage);

		Scene scene = new Scene(mainLayout, 800, 600);
		scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
		primaryStage.setScene(scene);
		primaryStage.show();
	}

	private VBox createMainLayout(Stage primaryStage) {
		// Header
		Label titleLabel = new Label("Publishers Management");
		titleLabel.setStyle("-fx-font-size: 24px; -fx-font-weight: bold;");

		Button backButton = new Button("← Back to Home");
		backButton.setOnAction(e -> primaryStage.close());

		HBox header = new HBox(20, titleLabel, backButton);
		header.setPadding(new Insets(10));
		header.setStyle("-fx-background-color: #f0f0f0;");
		header.setSpacing(20);

		// Table
		table = new TableView<>(publishers);
		table.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);

		TableColumn<Publisher, Integer> idCol = new TableColumn<>("ID");
		idCol.setCellValueFactory(new PropertyValueFactory<>("id"));

		TableColumn<Publisher, String> phoneCol = new TableColumn<>("Phone");
		phoneCol.setCellValueFactory(new PropertyValueFactory<>("phone"));

		TableColumn<Publisher, String> storeCol = new TableColumn<>("Store");
		storeCol.setCellValueFactory(new PropertyValueFactory<>("storeName"));

		TableColumn<Publisher, Void> actionCol = new TableColumn<>("Actions");
		actionCol.setCellFactory(param -> new TableCell<>() {
			private final Button editBtn = new Button("Edit");
			private final Button deleteBtn = new Button("Delete");
			private final HBox pane = new HBox(5, editBtn, deleteBtn);

			{
				pane.setAlignment(Pos.CENTER);

				editBtn.setOnAction(e -> {
					Publisher publisher = getTableView().getItems().get(getIndex());
					openEditPublisherWindow(publisher);
				});

				deleteBtn.setOnAction(e -> {
					Publisher publisher = getTableView().getItems().get(getIndex());
					if (DBConnect.deletePublisher(publisher.getId())) {
						publishers.remove(publisher);
						showAlert("Success", "Publisher deleted successfully.");
					} else {
						showAlert("Error", "Failed to delete publisher.");
					}
				});
			}

			@Override
			protected void updateItem(Void item, boolean empty) {
				super.updateItem(item, empty);
				if (empty) {
					setGraphic(null);
				} else {
					setGraphic(pane);
				}
			}
		});

		table.getColumns().addAll(idCol, phoneCol, storeCol, actionCol);

		// Add button
		Button addButton = new Button("Add New Publisher");
		addButton.setOnAction(e -> openAddPublisherWindow());

		// Layout
		VBox mainLayout = new VBox(15, header, table, addButton);
		mainLayout.setPadding(new Insets(20));
		return mainLayout;
	}

	private void openAddPublisherWindow() {
		Stage addStage = new Stage();
		addStage.setTitle("Add New Publisher");
		addStage.initModality(Modality.APPLICATION_MODAL);

		// Form fields
		TextField phoneField = new TextField();
		phoneField.setPromptText("Phone Number");

		ComboBox<String> storeCombo = new ComboBox<>();
		storeCombo.getItems().addAll("Main Store", "Mall Branch");
		storeCombo.setPromptText("Select Store");

		Button saveBtn = new Button("Save");
		saveBtn.setOnAction(e -> {
			try {
				int storeId = storeCombo.getValue().equals("Main Store") ? 1 : 2;
				Publisher newPublisher = new Publisher(0, // ID will be generated by database
						phoneField.getText(), storeId, storeCombo.getValue());

				if (DBConnect.addPublisher(newPublisher)) {
					publishers.add(newPublisher);
					showAlert("Success", "Publisher added successfully!");
					addStage.close();
				} else {
					showAlert("Error", "Failed to add publisher.");
				}
			} catch (Exception ex) {
				showAlert("Error", "Please fill all fields.");
			}
		});

		Button cancelBtn = new Button("Cancel");
		cancelBtn.setOnAction(e -> addStage.close());

		HBox buttons = new HBox(10, saveBtn, cancelBtn);
		buttons.setAlignment(Pos.CENTER_RIGHT);

		GridPane form = new GridPane();
		form.setVgap(10);
		form.setHgap(10);
		form.setPadding(new Insets(15));

		form.add(new Label("Phone:"), 0, 0);
		form.add(phoneField, 1, 0);
		form.add(new Label("Store:"), 0, 1);
		form.add(storeCombo, 1, 1);
		form.add(buttons, 1, 2);

		Scene scene = new Scene(form, 400, 200);
		scene.getStylesheets()
				.add(getClass().getResource("com/example/databaseyesbaby/application.css").toExternalForm());
		addStage.setScene(scene);
		addStage.showAndWait();
	}

	private void openEditPublisherWindow(Publisher publisher) {
		Stage editStage = new Stage();
		editStage.setTitle("Edit Publisher");
		editStage.initModality(Modality.APPLICATION_MODAL);

		// Form fields with current values
		TextField phoneField = new TextField(publisher.getPhone());

		ComboBox<String> storeCombo = new ComboBox<>();
		storeCombo.getItems().addAll("Main Store", "Mall Branch");
		storeCombo.setValue(publisher.getStoreName());

		Button saveBtn = new Button("Save");
		saveBtn.setOnAction(e -> {
			try {
				publisher.setPhone(phoneField.getText());
				int storeId = storeCombo.getValue().equals("Main Store") ? 1 : 2;
				publisher.setStoreId(storeId);
				publisher.setStoreName(storeCombo.getValue());

				if (DBConnect.updatePublisher(publisher)) {
					table.refresh();
					showAlert("Success", "Publisher updated successfully!");
					editStage.close();
				} else {
					showAlert("Error", "Failed to update publisher.");
				}
			} catch (Exception ex) {
				showAlert("Error", "Please fill all fields.");
			}
		});

		Button cancelBtn = new Button("Cancel");
		cancelBtn.setOnAction(e -> editStage.close());

		HBox buttons = new HBox(10, saveBtn, cancelBtn);
		buttons.setAlignment(Pos.CENTER_RIGHT);

		GridPane form = new GridPane();
		form.setVgap(10);
		form.setHgap(10);
		form.setPadding(new Insets(15));

		form.add(new Label("Phone:"), 0, 0);
		form.add(phoneField, 1, 0);
		form.add(new Label("Store:"), 0, 1);
		form.add(storeCombo, 1, 1);
		form.add(buttons, 1, 2);

		Scene scene = new Scene(form, 400, 200);
		scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
		editStage.setScene(scene);
		editStage.showAndWait();
	}

	private void showAlert(String title, String message) {
		Alert alert = new Alert(Alert.AlertType.INFORMATION);
		alert.setTitle(title);
		alert.setHeaderText(null);
		alert.setContentText(message);
		alert.showAndWait();
	}

	public static void main(String[] args) {
		launch(args);
	}
}