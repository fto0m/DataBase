package application;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.*;
import javafx.stage.Stage;

public class EmployeeApp extends Application {

	private ObservableList<Employee> employeeList;
	private ObservableList<String> storeNames;

	@Override
	public void start(Stage primaryStage) {
		// Load data from database
		employeeList = FXCollections.observableArrayList(DBConnect.getAllEmployees());
		storeNames = FXCollections.observableArrayList(DBConnect.getAllStoreNames());

		TabPane tabPane = new TabPane();

		Tab listTab = new Tab("Employees List", createEmployeeListPane());
		Tab addTab = new Tab("Add Employee", createAddEmployeePane());

		tabPane.getTabs().addAll(listTab, addTab);
		tabPane.setTabClosingPolicy(TabPane.TabClosingPolicy.UNAVAILABLE);

		Scene scene = new Scene(tabPane, 900, 600);
		scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());

		primaryStage.setTitle("Employees Management - Yes Baby");
		primaryStage.setScene(scene);
		primaryStage.show();
	}

	private VBox createEmployeeListPane() {
		TableView<Employee> table = new TableView<>(employeeList);

		TableColumn<Employee, Number> idCol = new TableColumn<>("ID");
		idCol.setCellValueFactory(new PropertyValueFactory<>("id"));

		TableColumn<Employee, String> nameCol = new TableColumn<>("Name");
		nameCol.setCellValueFactory(new PropertyValueFactory<>("name"));

		TableColumn<Employee, Number> salaryCol = new TableColumn<>("Salary");
		salaryCol.setCellValueFactory(new PropertyValueFactory<>("salary"));
		salaryCol.setCellFactory(tc -> new TableCell<>() {
			@Override
			protected void updateItem(Number salary, boolean empty) {
				super.updateItem(salary, empty);
				if (empty || salary == null) {
					setText(null);
				} else {
					setText(String.format("$%.2f", salary.doubleValue()));
				}
			}
		});

		TableColumn<Employee, String> phoneCol = new TableColumn<>("Phone");
		phoneCol.setCellValueFactory(new PropertyValueFactory<>("phone"));

		TableColumn<Employee, String> storeCol = new TableColumn<>("Store");
		storeCol.setCellValueFactory(new PropertyValueFactory<>("storeName"));

		TableColumn<Employee, Void> actionCol = new TableColumn<>("Actions");
		actionCol.setCellFactory(param -> new TableCell<>() {
			private final Button editBtn = new Button("Edit");
			private final Button deleteBtn = new Button("Delete");
			private final HBox box = new HBox(5, editBtn, deleteBtn);

			{
				editBtn.setOnAction(e -> {
					Employee emp = getTableView().getItems().get(getIndex());
					openEditEmployeeDialog(emp);
				});

				deleteBtn.setOnAction(e -> {
					Employee emp = getTableView().getItems().get(getIndex());
					if (DBConnect.deleteEmployee(emp.getId())) {
						employeeList.remove(emp);
						showAlert("Success", "Employee deleted successfully.");
					} else {
						showAlert("Error", "Failed to delete employee.");
					}
				});
			}

			@Override
			protected void updateItem(Void item, boolean empty) {
				super.updateItem(item, empty);
				setGraphic(empty ? null : box);
			}
		});

		table.getColumns().addAll(idCol, nameCol, salaryCol, phoneCol, storeCol, actionCol);

		VBox root = new VBox(10, new Label("Employees List"), table);
		root.setPadding(new Insets(10));
		return root;
	}

	private VBox createAddEmployeePane() {
		TextField nameField = new TextField();
		TextField salaryField = new TextField();
		TextField phoneField = new TextField();
		ComboBox<String> storeBox = new ComboBox<>(storeNames);

		Button saveBtn = new Button("Save Employee");
		Button cancelBtn = new Button("Cancel");

		cancelBtn.setOnAction(e -> {
			nameField.clear();
			salaryField.clear();
			phoneField.clear();
			storeBox.getSelectionModel().clearSelection();
		});

		saveBtn.setOnAction(e -> {
			if (validateFields(nameField, salaryField, phoneField, storeBox)) {
				Employee employee = new Employee(0, // ID will be generated by database
						nameField.getText(), Double.parseDouble(salaryField.getText()), phoneField.getText(),
						DBConnect.getStoreIdByName(storeBox.getValue()), storeBox.getValue());

				if (DBConnect.addEmployee(employee)) {
					showAlert("Success", "Employee added successfully!");
					employeeList.add(employee);
					cancelBtn.fire(); // Clear form
				} else {
					showAlert("Error", "Failed to add employee. Please try again.");
				}
			}
		});

		GridPane form = new GridPane();
		form.setVgap(10);
		form.setHgap(10);
		form.add(new Label("Full Name:"), 0, 0);
		form.add(nameField, 1, 0);
		form.add(new Label("Salary:"), 0, 1);
		form.add(salaryField, 1, 1);
		form.add(new Label("Phone Number:"), 0, 2);
		form.add(phoneField, 1, 2);
		form.add(new Label("Assigned Store:"), 0, 3);
		form.add(storeBox, 1, 3);

		HBox actions = new HBox(10, cancelBtn, saveBtn);

		VBox root = new VBox(15, new Label("Add New Employee"), form, actions);
		root.setPadding(new Insets(15));
		return root;
	}

	private void openEditEmployeeDialog(Employee employee) {
		Stage dialog = new Stage();
		dialog.setTitle("Edit Employee");

		TextField nameField = new TextField(employee.getName());
		TextField salaryField = new TextField(String.valueOf(employee.getSalary()));
		TextField phoneField = new TextField(employee.getPhone());
		ComboBox<String> storeBox = new ComboBox<>(storeNames);
		storeBox.setValue(employee.getStoreName());

		Button saveBtn = new Button("Save");
		Button cancelBtn = new Button("Cancel");

		cancelBtn.setOnAction(e -> dialog.close());

		saveBtn.setOnAction(e -> {
			if (validateFields(nameField, salaryField, phoneField, storeBox)) {
				employee.setName(nameField.getText());
				employee.setSalary(Double.parseDouble(salaryField.getText()));
				employee.setPhone(phoneField.getText());
				employee.setStoreId(DBConnect.getStoreIdByName(storeBox.getValue()));
				employee.setStoreName(storeBox.getValue());

				if (DBConnect.updateEmployee(employee)) {
					showAlert("Success", "Employee updated successfully!");
					dialog.close();
				} else {
					showAlert("Error", "Failed to update employee.");
				}
			}
		});

		GridPane form = new GridPane();
		form.setVgap(10);
		form.setHgap(10);
		form.add(new Label("Full Name:"), 0, 0);
		form.add(nameField, 1, 0);
		form.add(new Label("Salary:"), 0, 1);
		form.add(salaryField, 1, 1);
		form.add(new Label("Phone Number:"), 0, 2);
		form.add(phoneField, 1, 2);
		form.add(new Label("Assigned Store:"), 0, 3);
		form.add(storeBox, 1, 3);

		HBox buttons = new HBox(10, saveBtn, cancelBtn);
		VBox dialogRoot = new VBox(15, form, buttons);
		dialogRoot.setPadding(new Insets(15));

		Scene dialogScene = new Scene(dialogRoot, 400, 250);
		dialog.setScene(dialogScene);
		dialog.show();
	}

	private boolean validateFields(TextField nameField, TextField salaryField, TextField phoneField,
			ComboBox<String> storeBox) {
		if (nameField.getText().isEmpty()) {
			showAlert("Validation Error", "Name is required!");
			nameField.requestFocus();
			return false;
		}

		try {
			Double.parseDouble(salaryField.getText());
		} catch (NumberFormatException e) {
			showAlert("Validation Error", "Salary must be a number!");
			salaryField.requestFocus();
			return false;
		}

		if (phoneField.getText().isEmpty()) {
			showAlert("Validation Error", "Phone number is required!");
			phoneField.requestFocus();
			return false;
		}

		if (storeBox.getValue() == null) {
			showAlert("Validation Error", "Please select a store!");
			storeBox.requestFocus();
			return false;
		}

		return true;
	}

	private void showAlert(String title, String message) {
		Alert alert = new Alert(Alert.AlertType.INFORMATION);
		alert.setTitle(title);
		alert.setHeaderText(null);
		alert.setContentText(message);
		alert.showAndWait();
	}

	public static void main(String[] args) {
		launch(args);
	}
}